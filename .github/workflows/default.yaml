name: Deploy prodle Service

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Build and test
        run: |
          go mod tidy
          go build -v ./...
          go test -v ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prodle:latest
            ghcr.io/${{ github.repository_owner }}/prodle:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            
            # Define working directory and ensure it exists
            APP_DIR=/home/${USER}/services/prodle
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            
            # Log in to GitHub Container Registry
            echo ${{ secrets.TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Set the image name with the current commit SHA
            export DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/prodle:${{ github.sha }}
            
            # Pull the latest image
            docker pull $DOCKER_IMAGE
            
            # Stop and remove any existing container with the same name
            if [ "$(docker ps -aq -f name=prodle)" ]; then
              docker stop prodle && docker rm prodle
            fi
            
            touch prodle.db
            
            # Run the container on the shared network (e.g., caddy_net)
            docker run -d \
            --env-file .env \
            --restart unless-stopped \
            --name prodle \
            --network caddy_net \
              -v "$APP_DIR/prodle.db.json:/app/prodle.db" \
            $DOCKER_IMAGE